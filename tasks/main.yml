---
- name: "Install packages"
  retries: 3
  delay: 10
  until: output is success
  register: output
  ansible.builtin.package:
    update_cache: true
    name:
      - "apt-transport-https"

- name: "Install Kibana"
  notify: 
    - "Enable and start Kibana"
  block:
    - name: "Add Kibana GPG apt Key"
      ansible.builtin.apt_key:
        url: "https://artifacts.elastic.co/GPG-KEY-elasticsearch"

    - name: "Add Kibana Repository"
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64] https://artifacts.elastic.co/packages/{{ install_kibana__major_version }}.x/apt stable main"

    - name: "Update apt and install Kibana"
      ansible.builtin.apt:
        update_cache: true
        name:
          - "kibana"

- name: "Configure Kibana"
  notify:
    - "Restart Kibana"
    - "Delay Kibana starting"
  block:
    - name: "Get new enrollment TOKEN"
      run_once: true
      when: not (install_kibana__service_account_token_fact | default(false))
      block:
        - name: "Get the token client certs"
          when:  install_kibana__elastic_client_auth | default(false)
          block:
            - name: "Call the API and get a new TOKEN CERT"
              register: install_kibana__service_account_token_response
              failed_when: install_kibana__service_account_token_response.json.created != true
              changed_when: install_kibana__service_account_token_response.json.created != true
              ansible.builtin.uri:
                url: "{{ install_kibana__elastic_protocol }}://{{ install_kibana__elastic_hosts[0] }}/_security/service/elastic/kibana/credential/token/service_account_token-kibana-{{ install_kibana__service_account_token_basename }}?pretty=true"
                method: POST
                user: "elastic"
                password: "{{ install_kibana__elastic_password }}"
                client_cert: "{{ install_kibana__ssl_crt }}"
                client_key: "{{ install_kibana__ssl_key }}"

            - name: "Get/Set enrollment fact TOKEN"
              ansible.builtin.set_fact:
                cacheable: true
                install_kibana__service_account_token_fact: "{{ install_kibana__service_account_token_response.json.token.value }}"
                install_kibana__service_account_token: "{{ install_kibana__service_account_token_response.json.token.value }}"

        - name: "Get the token without client certs"
          when: not (install_kibana__elastic_client_auth | default(true))
          block:
            - name: "Call the API and get a new TOKEN"
              register: install_kibana__service_account_token_response
              failed_when: install_kibana__service_account_token_response.json.created != true
              changed_when: install_kibana__service_account_token_response.json.created != true
              ansible.builtin.uri:
                url: "{{ install_kibana__elastic_protocol }}://{{ install_kibana__elastic_hosts[0] }}/_security/service/elastic/kibana/credential/token/service_account_token-kibana-{{ install_kibana__service_account_token_basename }}?pretty=true"
                method: POST
                user: "elastic"
                password: "{{ install_kibana__elastic_password }}"

            - name: "Get/Set enrollment fact TOKEN"
              ansible.builtin.set_fact:
                cacheable: true
                install_kibana__service_account_token_fact: "{{ install_kibana__service_account_token_response.json.token.value }}"
                install_kibana__service_account_token: "{{ install_kibana__service_account_token_response.json.token.value }}"

    - name: "Import Kibana configuration file"
      ansible.builtin.template:
        src: "templates/kibana.yml.j2"
        dest: "{{ install_kibana__config_path }}/kibana.yml"
        mode: "0700"
        group: "{{ install_kibana__group }}"
        owner: "{{ install_kibana__user }}"
        lstrip_blocks: yes

    - name: "Set Kibana permissions"
      register: output
      changed_when: output.size < 0
      loop:
        - "{{ install_kibana__log_path }}"
        - "{{ install_kibana__config_path }}"
      loop_control:
        loop_var: path
      ansible.builtin.file:
        path: "{{ path }}"
        recurse: yes
        mode: "0700"
        group: "{{ install_kibana__group }}"
        owner: "{{ install_kibana__user }}"
        state: directory
